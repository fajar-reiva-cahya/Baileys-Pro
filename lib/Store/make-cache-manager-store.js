var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(exports,"__esModule",{value:!0});
const cache_manager_1=require("cache-manager"),WAProto_1=require("../../WAProto"),Utils_1=require("../Utils"),logger_1=__importDefault(require("../Utils/logger")),makeCacheManagerAuthState=async(e,f)=>{const g=await (0,cache_manager_1.caching)(e),k=async(a,b)=>{let c=void 0;"creds"===a&&(c=63115200);await g.set(`${f}:${a}`,JSON.stringify(b,Utils_1.BufferJSON.replacer),c)},l=async a=>{try{const b=await g.get(`${f}:${a}`);return b?JSON.parse(b,Utils_1.BufferJSON.reviver):null}catch(b){return logger_1.default.error(b),
null}},p=async a=>{try{return await g.del(`${f}:${a}`)}catch(b){logger_1.default.error(`Error removing ${a} from session ${f}`)}},m=await l("creds")||(0,Utils_1.initAuthCreds)();return{clearState:async()=>{try{const a=await g.store.keys(`${f}*`);await Promise.all(a.map(async b=>await g.del(b)))}catch(a){}},saveCreds:()=>k("creds",m),state:{creds:m,keys:{get:async(a,b)=>{const c={};await Promise.all(b.map(async h=>{let d=await l(`${a}-${h}`);"app-state-sync-key"===a&&d&&(d=WAProto_1.proto.Message.AppStateSyncKeyData.fromObject(d));
c[h]=d}));return c},set:async a=>{const b=[];for(const c in a)for(const h in a[c]){const d=a[c][h],n=`${c}-${h}`;b.push(d?k(n,d):p(n))}await Promise.all(b)}}}}};exports.default=makeCacheManagerAuthState;
