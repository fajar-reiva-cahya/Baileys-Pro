var __createBinding=this&&this.__createBinding||(Object.create?function(d,b,a,c){void 0===c&&(c=a);var e=Object.getOwnPropertyDescriptor(b,a);if(!e||("get"in e?!b.__esModule:e.writable||e.configurable))e={enumerable:!0,get:function(){return b[a]}};Object.defineProperty(d,c,e)}:function(d,b,a,c){void 0===c&&(c=a);d[c]=b[a]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(d,b){Object.defineProperty(d,"default",{enumerable:!0,value:b})}:function(d,b){d["default"]=b}),__importStar=
this&&this.__importStar||function(d){if(d&&d.__esModule)return d;var b={};if(null!=d)for(var a in d)"default"!==a&&Object.prototype.hasOwnProperty.call(d,a)&&__createBinding(b,d,a);__setModuleDefault(b,d);return b};Object.defineProperty(exports,"__esModule",{value:!0});exports.makeLibSignalRepository=void 0;const libsignal=__importStar(require("libsignal")),WASignalGroup_1=require("../../WASignalGroup"),Utils_1=require("../Utils"),WABinary_1=require("../WABinary");
function makeLibSignalRepository(d){const b=signalStorage(d);return{decryptGroupMessage({group:a,authorJid:c,msg:e}){a=jidToSignalSenderKeyName(a,c);return(new WASignalGroup_1.GroupCipher(b,a)).decrypt(e)},async processSenderKeyDistributionMessage({item:a,authorJid:c}){const e=new WASignalGroup_1.GroupSessionBuilder(b);c=jidToSignalSenderKeyName(a.groupId,c);a=new WASignalGroup_1.SenderKeyDistributionMessage(null,null,null,null,a.axolotlSenderKeyDistributionMessage);const {[c]:f}=await d.keys.get("sender-key",
[c]);f||await b.storeSenderKey(c,new WASignalGroup_1.SenderKeyRecord);await e.process(c,a)},async decryptMessage({jid:a,type:c,ciphertext:e}){a=jidToSignalProtocolAddress(a);a=new libsignal.SessionCipher(b,a);let f;switch(c){case "pkmsg":f=await a.decryptPreKeyWhisperMessage(e);break;case "msg":f=await a.decryptWhisperMessage(e)}return f},async encryptMessage({jid:a,data:c}){a=jidToSignalProtocolAddress(a);a=new libsignal.SessionCipher(b,a);const {type:e,body:f}=await a.encrypt(c);return{type:3===
e?"pkmsg":"msg",ciphertext:Buffer.from(f,"binary")}},async encryptGroupMessage({group:a,meId:c,data:e}){a=jidToSignalSenderKeyName(a,c);c=new WASignalGroup_1.GroupSessionBuilder(b);const {[a]:f}=await d.keys.get("sender-key",[a]);f||await b.storeSenderKey(a,new WASignalGroup_1.SenderKeyRecord);c=await c.create(a);return{ciphertext:await (new WASignalGroup_1.GroupCipher(b,a)).encrypt(e),senderKeyDistributionMessage:c.serialize()}},async injectE2ESession({jid:a,session:c}){await (new libsignal.SessionBuilder(b,
jidToSignalProtocolAddress(a))).initOutgoing(c)},jidToSignalProtocolAddress(a){return jidToSignalProtocolAddress(a).toString()}}}exports.makeLibSignalRepository=makeLibSignalRepository;const jidToSignalProtocolAddress=d=>{const {user:b,device:a}=(0,WABinary_1.jidDecode)(d);return new libsignal.ProtocolAddress(b,a||0)},jidToSignalSenderKeyName=(d,b)=>(new WASignalGroup_1.SenderKeyName(d,jidToSignalProtocolAddress(b))).toString();
function signalStorage({creds:d,keys:b}){return{loadSession:async a=>{({[a]:a}=await b.get("session",[a]));if(a)return libsignal.SessionRecord.deserialize(a)},storeSession:async(a,c)=>{await b.set({session:{[a]:c.serialize()}})},isTrustedIdentity:()=>!0,loadPreKey:async a=>{a=a.toString();({[a]:a}=await b.get("pre-key",[a]));if(a)return{privKey:Buffer.from(a.private),pubKey:Buffer.from(a.public)}},removePreKey:a=>b.set({"pre-key":{[a]:null}}),loadSignedPreKey:()=>{const a=d.signedPreKey;return{privKey:Buffer.from(a.keyPair.private),
pubKey:Buffer.from(a.keyPair.public)}},loadSenderKey:async a=>{({[a]:a}=await b.get("sender-key",[a]));if(a)return new WASignalGroup_1.SenderKeyRecord(a)},storeSenderKey:async(a,c)=>{await b.set({"sender-key":{[a]:c.serialize()}})},getOurRegistrationId:()=>d.registrationId,getOurIdentity:()=>{const {signedIdentityKey:a}=d;return{privKey:Buffer.from(a.private),pubKey:(0,Utils_1.generateSignalPubKey)(a.public)}}}};
